defmodule BigqueryGateway.Utils do
  alias BigqueryGateway.Connection

  def create_table(project_id, dataset, table_name, schema, options \\ []) do
    google_schema = schema |> convert_to_google_struct()

    GoogleApi.BigQuery.V2.Api.Tables.bigquery_tables_insert(
      Connection.get(),
      project_id,
      dataset,
      body: %GoogleApi.BigQuery.V2.Model.Table{
        tableReference: %GoogleApi.BigQuery.V2.Model.TableReference{
          datasetId: dataset,
          projectId: project_id,
          tableId: table_name
        },
        schema: %GoogleApi.BigQuery.V2.Model.TableSchema{
          fields: google_schema
        },
        timePartitioning: get_partition_on(Keyword.get(options, :partition_on)),
        clustering: get_cluster_on(Keyword.get(options, :cluster_on))
      }
    )
    |> process_create_table_response()
  end

  defp convert_to_google_struct(schema) do
    schema
    |> Enum.map(fn %{name: name, type: type, mode: mode} ->
      %GoogleApi.BigQuery.V2.Model.TableFieldSchema{name: name, type: type, mode: mode}
    end)
  end

  def get_partition_on(nil) do
    nil
  end

  def get_partition_on(partition_on) do
    %GoogleApi.BigQuery.V2.Model.TimePartitioning{
      type: "DAY",
      field: partition_on
    }
  end

  def get_cluster_on(nil) do
    nil
  end

  def get_cluster_on(cluster_on) do
    %GoogleApi.BigQuery.V2.Model.Clustering{
      fields: cluster_on
    }
  end

  defp process_create_table_response({:ok, _response}) do
    IO.puts("Create table succeeded")
  end

  defp process_create_table_response({:error, response}) do
    IO.puts("Create table failed")
    IO.puts("Reason: #{inspect(response)}")
  end
end
